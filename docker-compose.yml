services:
  client:
    build: ./app
    container_name: client
    networks:
      - spring-postgres
    ports:
      - "8080:4200"

  api:
    build: ./api
    container_name: api
    depends_on:
      - database
      - rabbitmq
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://database:5432/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=${SPRING_JPA_HIBERNATE_DDL_AUTO}
      - SPRING_RABBITMQ_HOST=${SPRING_RABBITMQ_HOST}
    networks:
      - spring-postgres
    ports:
      - '8090:8080'

  database:
    container_name: database
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
    image: 'postgres:latest'
    networks:
      - spring-postgres
    ports:
      - '5432:5432'
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data

  email:
    build: ./email-processor
    container_name: email-processor
    depends_on:
      - api
      - rabbitmq
    environment:
      - SPRING_RABBITMQ_HOST=${SPRING_RABBITMQ_HOST}
    networks:
      - spring-postgres
    ports:
      - '8091:8080'

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:management
    networks:
      - spring-postgres
    ports:
      - '5672:5672'
      - '15672:15672'

networks:
  spring-postgres:

volumes:
  db-data:
  node_volumes:
